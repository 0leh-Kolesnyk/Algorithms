// Поиск в ширину в графе
// Решает задачу: поиск пути, существует ли такой путь или нет,
// находит путь за минимальное количество шагов (см. алгоритм Дэйкстра)

const graph = {} // создали объект
graph.a = ['b', 'c'] // поля которого это вершины и каждое поле равно массиву вершин в которые есть путь
graph.b = ['f']
graph.c = ['d', 'e']
graph.d = ['f']
graph.e = ['f']
graph.f = ['g']

function breadthSearch(graph, start, end) { // функция поиска в ширину
    //параметрами принимает сам graph, стартовую точку и конечную
    let queue = []//создаем тот самый граф (в данном случае это массив, и мы можем извлекать из начала и добавлять в конец)
    queue.push(start) //сразу же в эту очередь мы добавляем стартовую вершину
    while (queue.length > 0) { //создаем цикл в котором будем крутиться пока в этой очереди есть хотя бы один элемент
        const current = queue.shift() //из начала очереди достаем текущую вершину(.shift извлекает первый элемент из массива)
        if (!graph[current]) { //проверяем: есди по текущей вершине в graph ничего не находится
            graph[current] = [] //то мы присвоим по этой вершине в graph пустой массив, т.е. из этой вершины никуда пути нету
            // это делается для того, чтобы в дальнейшем, когда мы будем обрабатывать эти массивы программа не сломалась
        }
        if (graph[current].includes(end)) {//проверяем: если в graph по текущей вершине массив содержит конечную точку,
            return true //то мы завершаем выполнение программы и возвращаем true,
            // т.е. на данном этапе мы обошли весь graph и пришли к пункту назначения.
            // Функция include проверяет, есть ли в массиве данный элемент
        } else {
            queue = [...queue, ...graph[current]] // добавляем в очередь новые вершины
            // ...queue - разворачиваем то, что уже находится в очереди в массив
            // ...graph[current] - и в конец разворачиваем массив, который лежит в graph по текущей вершине.
            // Этот цикл будет крутиться до тех пор, пока очередь не пустая. Как только дойдет до финальной точки цикл остановится
        }
    }
    return false
}

console.log(breadthSearch(graph, 'a', 'e')) // вызываем функцию, первым параметром передаем graph, начальную точку и конечную точку